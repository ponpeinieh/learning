---
layout: course
name: C/C++語言
details: C/C++語言入門(20小時), 進階(20小時)
sort_order: 3
---

## C/C++ 課程

我們生活在一個科技飛速發展的時代，編程已經成為現代教育中不可或缺的一部分。C和C++是兩種功能強大且非常受歡迎的編程語言，它們被廣泛應用於各種計算機科學和工程領域，例如作業系統開發、遊戲開發、嵌入式系統、數據科學等。

- **C語言**：是一種通用的編程語言，於1972年由Dennis Ritchie在貝爾實驗室創建。它具有簡潔、高效的特點，是許多現代編程語言的基礎。C語言的優勢特性包括：

  - **可移植性**：C語言的設計旨在實現可移植性，使得在不同計算機平台上開發的程式碼可以輕松地移植和運行。

  - **高效性**：C語言的語法簡潔明瞭，並且允許直接與計算機硬體互動，因此具有高效的執行速度，適用於對性能要求較高的應用領域。

  - **豐富的函式庫支持**：C語言擁有豐富的標準函式庫和第三方函式庫支持，提供了大量的函數和工具，方便開發人員進行軟件開發。


- **C++語言**：是架構在C語言之上，功能更加擴展的一種語言，由Bjarne Stroustrup於1983年創建。C++不僅保留了C語言的高效性能，還增加了物件導向編程的特性，使編程更加靈活和強大。C++廣泛應用於高性能應用程序，如遊戲引擎、圖形處理和大型系統開發。

學習C和C++語言對於未來在資訊科技相關領域發展具有重要意義。不僅能夠提高你的編程技能，還能培養你的邏輯思維和問題解決能力，這些都是未來學習和工作的基礎。

1. **紮實的基礎知識**：C語言和C++語言是許多現代編程語言的基礎。學習這兩種語言可以幫助同學們深入理解計算機的運作原理，為以後學習其他編程語言和技術打下堅實的基礎。

2. **廣泛的應用領域**：C和C++被廣泛應用於操作系統、遊戲開發、嵌入式系統、數據科學等領域。掌握這兩種語言將使同學們在未來的職業生涯中擁有更多的選擇和機會。

3. **培養邏輯思維和問題解決能力**：編程是一種訓練邏輯思維和問題解決能力的有效方法。通過學習C和C++語言，同學們將學會如何分析問題、設計解決方案，這些技能對於他們的學業和未來的職業發展都有很大的幫助。

4. **應對未來科技挑戰**：在人工智能、大數據和物聯網等新興技術的推動下，編程技能將變得越來越重要。學習C和C++語言將使同學們具備應對未來科技挑戰的能力，為他們的未來做好準備。
 
本課程分為入門和進階兩階段，旨在為同學們提供系統化的C/C++編程學習體驗。

### 第一階段：入門課程（20小時）

入門課程主要以C語言為主，旨在建立同學們對基本編程概念和技能的理解和掌握。C語言作為一種結構化編程語言，具有豐富的底層功能和強大的執行效率，是理解計算機基礎運作原理的理想語言。通過學習C語言，同學們可以掌握變數、運算子、條件語句、迴圈、陣列等基礎知識。

### 第二階段：進階課程（20小時）

進階課程則以C++語言為主，C++是一種更加現代化和功能豐富的語言，引入了物件導向編程的概念，使得代碼更具靈活性和可擴展性。同學們將深入學習C++語言的物件導向特性、標準庫函數等內容，進一步提升編程技能和解決問題的能力。

### 學習路徑建議

同學們可以選擇首先學習Python等高級語言，再轉而學習C/C++，也可以直接從C/C++語言入手。如果同學們已經有Scratch、Minecraft等基礎，將會更容易理解和吸收課程內容，但即使沒有任何編程基礎，也完全沒有問題，因為我們的課程將從最基礎的知識開始，並逐步引導同學們進入編程的世界。

## 課程大綱

### 第一階段：入門課程（共 20 小時, 10 堂課，每堂 2 小時）

| 單元 | 主題 |
| --- | --- |
| 1 | 課程介紹, 環境設置, Hello World 程序 |
| 2 | 輸入與輸出, 資料型態 |
| 3 | 運算子(上) |
| 4 | 運算子(下) |
| 5 | 決策判斷(上) |
| 6 | 決策判斷(下) |
| 7 | 迴圈(上) |
| 8 | 迴圈(下) |
| 9 | 陣列(上) |
| 10 | 陣列(下) |

### 第二階段：進階課程（共 20 小時, 10 堂課，每堂 2 小時）

| 單元 | 主題 |
| --- | --- |
| 1 | C++ 輸入與輸出 |
| 2 | string 物件 |
| 3 | 指標 |
| 4 | 動態記憶體配置 |
| 5 | 函數(上) |
| 6 | 函數(下) |
| 7 | 前置處理器與巨集 |
| 8 | 枚舉, 結構 |
| 9 | 物件導向語法 |
| 10 | 檔案存取 |

## 詳細教學内容大綱 

## 第一階段：入門課程（20小時）

### 單元 1: 課程介紹, 環境設置, Hello World 程序
- 課程目標與內容概述
- 編程環境介紹（IDE和編譯器）
- 安裝和配置（Dev_CPP, Visual Studio Code, GCC等）
- Hello World 程序
- C/C++ 語言歷史與現況
- 使用變數資料
- printf() 函數

### 單元 2: 輸入與輸出, 資料型態
- 基本輸入輸出
- 變數和資料型態

### 單元 3: 運算子(上)
- 算術運算子
- 關係運算子

### 單元 4: 運算子(下)
- 指定運算子
- 邏輯運算子
- 位元運算子
- 其他運算子(轉型, sizeof)

### 單元 5: 決策判斷(上)
- 條件語句（if, else if, else）

### 單元 6: 決策判斷(下)
- 條件語句（switch case）

### 單元 7: 迴圈(上)
- 迴圈（while, do-while）

### 單元 8: 迴圈(下)
- 迴圈（for）
- 跳轉語句（break, continue, return）

### 單元 9: 陣列(上)
- 一維陣列
- 字元陣列與字串

### 單元 10: 陣列(下)
- 二維陣列
- 字串陣列

## 第二階段：進階課程（20小時）

### 單元 1: C++ 輸入與輸出
- cin, cout 物件
- 命名空間
- iostream, iomanip 函式庫

### 單元 2: string 物件
- C++ string 物件 vs char 陣列
- string 物件的操作

### 單元 3: 指標
- 指標基本概念
- 取值, 位移操作
- 指標與陣列的關係

### 單元 4: 動態記憶體配置
- 動態記憶體配置（malloc, free 的使用）
- new, delete 運算子

### 單元 5: 函數(上)
- 函數定義與宣告
- 函數參數與回傳值
- 參考
- 區域變數, 全域變數

### 單元 6: 函數(下)
- 函數過載
- 樣板函數
- 遞迴函數

### 單元 7: 前置處理器與巨集
- 前置處理指令（#include, #define, 條件編譯等）
- 巨集

### 單元 8: 枚舉, 結構
- 枚舉定義與使用
- 結構定義與使用

### 單元 9: 物件導向語法
- 類別與物件
- 封裝與數據隱藏
- this 指標

### 單元 10: 檔案存取
- 檔案讀寫操作
- 檔案指標
- 常用檔案操作函數（fopen, fclose, fprintf, fscanf 等）
