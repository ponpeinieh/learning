---
layout: course
name: Java語言
details: Java語言入門(20小時), 進階(20小時)
sort_order: 4
---

## Java 課程

Java 是一種高效、穩定且廣泛使用的程式設計語言。自 1995 年由 Sun Microsystems 推出以來，Java 一直是全球最受歡迎的程式語言之一。Java 的設計目的是讓程式設計師可以編寫一次，並能在任何支持 Java 的平台上運行，這就是所謂的“寫一次，跑遍全世界”（Write Once, Run Anywhere）的特性。

#### 為什麼選擇學習 Java？

1. **廣泛應用**：Java 被廣泛應用於各種領域，包括企業級應用、行動應用（如 Android 應用）、大數據、雲計算、物聯網（IoT）等。學習 Java 可以打開通向多種職業道路的大門。

2. **物件導向**：Java 是一種物件導向語言，這意味著它強調物件和類別的使用，這有助於同學們理解和應用現代程式設計的基本概念，為將來學習其他語言奠定基礎。

3. **穩定和安全**：Java 提供了一個強大的安全性架構，適合開發需要高穩定性和安全性的應用程式。

4. **強大的社群支持**：Java 擁有龐大的開發者社群，提供豐富的學習資源和技術支援。無論是初學者還是進階學習者，都可以輕易找到幫助。

5. **職業發展機會**：根據許多技術招聘網站的數據，Java 開發者一直是需求量大的職位之一。掌握 Java 技能，可以增加同學們未來在職場上的競爭力。

#### 為什麼參加 Java 課程學習重要？

1. **建立堅實的程式設計基礎**：Java 課程從基本語法開始，逐步講解資料結構、物件導向設計和常見的程式設計模式。這些內容可以幫助同學們建立堅實的程式設計基礎，並為進一步的技術學習做好準備。

2. **實踐能力的提升**：通過課程中的實踐項目和作業，同學們將能夠應用所學的知識，動手解決實際問題，提升他們的程式設計和問題解決能力。

3. **增強邏輯思維能力**：學習程式設計需要邏輯思維和系統分析能力。Java 課程將通過各種案例和項目，幫助同學們提升這些能力，這對他們在學業和日常生活中都有很大的幫助。

4. **科技興趣的激發**：參加 Java 課程可以激發同學們對科技和編程的興趣，讓他們了解科技的前沿動態和未來發展方向，從而更加積極地參與到科技學習和應用中。

本課程分為入門和進階兩階段，旨在為學生提供系統化的Java編程學習體驗。

### 第一階段：入門課程（20小時）

 入門課程涵蓋了從基本資料型態、變數、決策判斷、迴圈等基礎知識到基本的物件導向概念。幫助學生掌握 Java 的基礎知識和基本程式設計技能，了解物件導向程式設計的核心概念。

### 第二階段：進階課程（20小時）

 進階課程帶領同學們深入理解 Java 的高級特性, 如繼承、多型、泛型等，掌握更複雜的程式設計技巧，為實際應用和進階學習奠定基礎。 

### 學習路徑建議

#### 初學者路徑
1. **開始學習程式設計**：建議從簡單的程式設計語言開始，例如 Python，這有助於初學者快速理解程式設計的基本概念和邏輯。
2. **學習 C/C++ 語言**：掌握 C 或 C++ 語言可以為學生打下良好的程式設計基礎，了解低階程式設計和記憶體管理的概念，這將有助於理解後續的 Java 課程。
3. **轉向學習 Java**：在有 C/C++ 基礎後，學習 Java 將變得更加容易。學生將能夠快速適應 Java 的語法並理解其物件導向特性。
4. **完成 Java 入門課程**：通過學習 Java 入門課程，掌握基本的程式設計技能和物件導向概念。
5. **進階 Java 課程**：在入門課程的基礎上，進一步學習 Java 的高級特性，掌握更複雜的程式設計技巧。

#### 進階學習與應用
2. **專業認證**：考取 Java 認證，如 Oracle Certified Java Programmer (OCJP)，進一步證明自己的技能水平。
3. **探索其他程式設計領域**：學習其他相關技術，如 Android 開發、大數據、雲計算等，拓展自己的技術視野。

通過上述學習路徑，學生不僅可以掌握 Java 語言的基本和進階知識，還能夠在實際項目中應用這些技能，為未來的職業發展做好充分的準備。

 
## 課程大綱

## 第一階段：入門課程（共 20 小時, 10 堂課，每堂 2 小時）

| 單元 | 主題 |
|------|------|
| 1    | 課程介紹、環境設置與 Hello World 程序 |
| 2    | Java 程式結構與資料型態 |
| 3    | 運算子 |
| 4    | 流程控制: 決策判斷 |
| 5    | 流程控制: 迴圈 |
| 6    | 陣列 |
| 7    | 物件導向分析與設計 |
| 8    | 方法 |
| 9    | 靜態成員 |
| 10   | 建構子 |

## 第二階段：進階課程（共 20 小時, 10 堂課，每堂 2 小時）

| 單元 | 主題 |
|------|------|
| 1    | 字串及包裝類別 |
| 2    | 套件與專案架構 |
| 3    | 繼承 |
| 4    | 多型 |
| 5    | 例外事件處理 |
| 6    | 抽象類別與介面 |
| 7    | 泛型 |
| 8    | 集合框架 |
| 9    | 多執行緒與並行性 |
| 10   | 檔案處理與 NIO |
  
## 詳細教學内容大綱 

## 第一階段：入門課程（20小時）

### 單元 1: 課程介紹、環境設置與 Hello World 程序
- 課程目標與內容概述
- Java 開發環境安裝與設置
- 撰寫與執行 Hello World 程序
- Java 語言的歷史與現狀、應用領域、平台架構及語言特性
- 初步了解物件導向

### 單元 2: Java 程式結構與資料型態
- Java 程式的基本結構
- 基本資料型態與參考型態

### 單元 3: 運算子
- 算術運算子
- 關係運算子
- 指定運算子
- 邏輯運算子
- 位元運算子
- 轉型運算子
- 條件運算子
- 運算子優先順序

### 單元 4: 流程控制: 決策判斷
- if-else 判斷語句
- switch-case 判斷語句

### 單元 5: 流程控制: 迴圈
- while 迴圈
- do-while 迴圈
- for 迴圈
- 迴圈中斷與跳過 (break, continue)
- 標籤的使用

### 單元 6: 陣列
- 一維陣列
- 氣泡排序法
- 二維陣列

### 單元 7: 物件導向分析與設計
- 應用程式開發流程
- 物件導向分析與設計
- UML 統一塑模語言
- 物件的宣告、建立及使用
- 執行期間的記憶體狀態
- Stack 與 Heap 的區別
- 物件參考與實際物件位置
- 物件成員變數與區域變數

### 單元 8: 方法
- 成員方法的宣告與呼叫
- 方法呼叫堆疊
- 方法參數的傳遞
- 方法的重載
- 可變動長度參數 (varargs)
- 遞迴方法

### 單元 9: 靜態成員
- 類別成員（實例成員與靜態成員）
- 靜態區塊
- 靜態匯入

### 單元 10: 建構子
- 物件建構流程
- 預設建構子
- 建構子的重載
- 建構子串聯呼叫
- this 關鍵字的使用
- 封裝

## 第二階段：進階課程（20小時）

### 單元 1: 字串及包裝類別
- String 類別
- String 與 char 的比較
- String 的建立
- 字串常數池
- == 與 equals() 的比較
- String 常用方法
- String 的唯讀性
- StringBuilder
- 包裝類別
- 正規表示式

### 單元 2: 套件與專案架構
- 套件宣告
- 套件中類別的使用
- 匯入
- 套件存取等級
- 專案架構
- Java Archive 檔
- 建立 JAR 檔

### 單元 3: 繼承
- 類別繼承
- 繼承關係下建構子的呼叫
- super() 與 this() 的比較
- 父類別的預設建構子
- 方法覆蓋
- protected 存取等級
- super 關鍵字
- final 關鍵字
- Object 類別

### 單元 4: 多型
- 型態檢查與虛擬方法呼叫
- 多型的應用
- 參考型態的轉型
- instanceof 運算子

### 單元 5: 例外事件處理
- 丟出例外
- 例外類別
- 不需檢查（Unchecked）的例外
- 必須檢查（Checked）的例外
- 例外處理機制

### 單元 6: 抽象類別與介面
- 抽象類別的概念
- 抽象方法的定義與實作
- 介面的概念與定義
- 介面與抽象類別的區別
- 單一繼承與多重介面實作
- 預設方法與靜態方法 (Java 8+ 新特性)

### 單元 7: 泛型
- 泛型的基本概念
- 泛型類別與泛型方法
- 泛型在集合框架中的應用
- 型態安全與程式碼重用性

### 單元 8: 集合框架
- 集合框架概述
- List, Set, Map 等集合介面及其實作類別
- 重要的集合操作與方法
- 集合的排序與比較（Comparable 與 Comparator）
- 使用 Collections 工具類進行集合操作

### 單元 9: 多執行緒與並行性
- 執行緒的基本概念與創建方法（繼承 Thread 類與實作 Runnable 介面）
- 執行緒的生命週期
- 執行緒同步控管與物件鎖（synchronized 關鍵字）
- wait, notify, notifyAll 方法
- 高階並行工具（如 Executor 框架、Callable 與 Future）

### 單元 10: 檔案處理與 NIO
- 檔案與目錄的操作
- 檔案讀寫（使用 FileReader/FileWriter 與 BufferedReader/BufferedWriter）
- 物件序列化與反序列化（ObjectInputStream/ObjectOutputStream）
- NIO (New I/O) 的基本概念與應用
- 使用 Path 和 Files 類進行檔案操作